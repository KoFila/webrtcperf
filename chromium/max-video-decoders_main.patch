diff --git a/video/video_receive_stream2.cc b/video/video_receive_stream2.cc
index 7d307c6d2c..5fa1e4d7b1 100644
--- a/video/video_receive_stream2.cc
+++ b/video/video_receive_stream2.cc
@@ -66,6 +66,31 @@ namespace {
 constexpr TimeDelta kMinBaseMinimumDelay = TimeDelta::Zero();
 constexpr TimeDelta kMaxBaseMinimumDelay = TimeDelta::Seconds(10);
 
+uint getTotalVideoDecoders() {
+  FileWrapper file_wrapper = FileWrapper::OpenReadOnly("/dev/shm/chromium-video-decoders");
+  if (file_wrapper.is_open()) {
+    char buf[256];
+    file_wrapper.Read(buf, sizeof(buf));
+    file_wrapper.Close();
+    return (uint)atoi(buf);
+  }
+  return 0;
+}
+
+void updateTotalVideoDecoders(int value) {
+  char buf[256];
+  uint total_video_decoders = getTotalVideoDecoders();
+  snprintf(buf, sizeof(buf), "%u", std::max<uint>(0, total_video_decoders + value));
+
+  FileWrapper file_wrapper = FileWrapper::OpenWriteOnly("/dev/shm/chromium-video-decoders");
+  if (!file_wrapper.is_open()) {
+    RTC_LOG(LS_ERROR) << "total video decoders file cannot be opened: /dev/shm/chromium-video-decoders";
+    return;
+  }
+  file_wrapper.Write(buf, strlen(buf));
+  file_wrapper.Close();
+}
+
 // Concrete instance of RecordableEncodedFrame wrapping needed content
 // from EncodedFrame.
 class WebRtcRecordableEncodedFrame : public RecordableEncodedFrame {
@@ -135,7 +160,7 @@ class NullVideoDecoder : public webrtc::VideoDecoder {
 
   int32_t Decode(const webrtc::EncodedImage& input_image,
                  int64_t render_time_ms) override {
-    RTC_LOG(LS_ERROR) << "The NullVideoDecoder doesn't support decoding.";
+    RTC_LOG(LS_WARNING) << "The NullVideoDecoder doesn't support decoding.";
     return WEBRTC_VIDEO_CODEC_OK;
   }
 
@@ -349,6 +374,20 @@ void VideoReceiveStream2::Start() {
     renderer = this;
   }
 
+  // Check if we should create video decoders.
+  enable_video_decoders_ = true;
+  std::string max_video_decoders = call_->trials().Lookup("WebRTC-MaxVideoDecoders");
+  if (!max_video_decoders.empty()) {
+    uint video_decoders = getTotalVideoDecoders();
+    uint max_decoders = (uint)atoi(max_video_decoders.c_str());
+    RTC_LOG(LS_ERROR) << "WebRTC-MaxVideoDecoders: " << video_decoders << "/" << max_decoders;
+    if (video_decoders >= max_decoders) {
+      enable_video_decoders_ = false;
+    }
+  }
+  if (enable_video_decoders_)
+    updateTotalVideoDecoders(1);
+
   for (const Decoder& decoder : config_.decoders) {
     VideoDecoder::Settings settings;
     settings.set_codec_type(
@@ -427,6 +466,9 @@ void VideoReceiveStream2::Stop() {
     stats_proxy_.DecoderThreadStopped();
 
     UpdateHistograms();
+
+    if (enable_video_decoders_)
+      updateTotalVideoDecoders(-1);
   }
 
   // TODO(bugs.webrtc.org/11993): Make these calls on the network thread.
@@ -518,8 +560,9 @@ void VideoReceiveStream2::CreateAndRegisterExternalDecoder(
     const Decoder& decoder) {
   TRACE_EVENT0("webrtc",
                "VideoReceiveStream2::CreateAndRegisterExternalDecoder");
-  std::unique_ptr<VideoDecoder> video_decoder =
-      config_.decoder_factory->Create(env_, decoder.video_format);
+  std::unique_ptr<VideoDecoder> video_decoder = enable_video_decoders_ ?
+    config_.decoder_factory->Create(env_, decoder.video_format) :
+    nullptr;
   // If we still have no valid decoder, we have to create a "Null" decoder
   // that ignores all calls. The reason we can get into this state is that the
   // old decoder factory interface doesn't have a way to query supported
diff --git a/video/video_receive_stream2.h b/video/video_receive_stream2.h
index 05e719c39c..80e151bed3 100644
--- a/video/video_receive_stream2.h
+++ b/video/video_receive_stream2.h
@@ -278,6 +278,7 @@ class VideoReceiveStream2
   RtpStreamsSynchronizer rtp_stream_sync_;
 
   std::unique_ptr<VideoStreamBufferController> buffer_;
+  bool enable_video_decoders_;
 
   // `receiver_controller_` is valid from when RegisterWithTransport is invoked
   //  until UnregisterFromTransport.
